<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Funding Gates]]></title>
  <link href="http://techblog.fundinggates.com/atom.xml" rel="self"/>
  <link href="http://techblog.fundinggates.com/"/>
  <updated>2013-03-28T13:51:59-04:00</updated>
  <id>http://techblog.fundinggates.com/</id>
  <author>
    <name><![CDATA[Funding Gates]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatically Generate Ember Models from Rails Serializers]]></title>
    <link href="http://techblog.fundinggates.com/blog/2013/03/automatically-generate-ember-models-from-rails-serializers/"/>
    <updated>2013-03-28T12:54:00-04:00</updated>
    <id>http://techblog.fundinggates.com/blog/2013/03/automatically-generate-ember-models-from-rails-serializers</id>
    <content type="html"><![CDATA[<p><em>by <a href="http://www.mattrogish.com/">Matt Rogish</a> (<a href="https://twitter.com/MattRogish">@MattRogish</a>)</em></p>

<p>When working with <a href="http://emberjs.com/">EmberJS</a> in a Rails context, we noticed that keeping
our Rails and Ember models in sync was a time-consuming and error-prone <a href="http://techblog.fundinggates.com/blog/2012/10/moving-emberjs-forward/">process</a>.</p>

<p>As <a href="https://twitter.com/jo_liss">Jo</a> mentioned:</p>

<blockquote><p>In smaller projects you can repeat your database columns in the Ember-side<br/>model definitions. For our more complex app, we found that this doesn&#8217;t scale.<br/>We ended up going with code generation for the ember-data model definitions,<br/>generating a schema.js file using a rake task.</p></blockquote>


<p>I&#8217;ve gotten some requests to expand on that and include some code. Note: this is
for pre-1.0 Ember so I wouldn&#8217;t go copying-and-pasting this into your project.
It&#8217;s not likely to work and you&#8217;ll get strange errors. Still, since it&#8217;s not much
code you could start with this and tweak it based on the latest version of Ember.</p>

<p>Consider the following Rails model, the proverbial &#8220;User&#8221;:</p>

<figure class='code'><figcaption><span>app/models/user.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:phone</span><span class="p">,</span> <span class="ss">:birthdate</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:organization</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the associated <a href="https://github.com/rails-api/active_model_serializers">ActiveModelSerializer</a>:</p>

<figure class='code'><figcaption><span>app/serializers/user_serializer.rb  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="no">ApplicationSerializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:organization_id</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:phone</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:organization</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Computed attributes</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">:ember_birthdate</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ember_birthdate</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">birthdate</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%m/%d/%Y&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to consume this data, you&#8217;ll need an Ember model that looks something like this (Coffeescript for brevity):</p>

<figure class='code'><figcaption><span>app/assets/javascripts/ember/models/user.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.User = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">email: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">first_name: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">last_name: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">phone: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">full_name: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">ember_birthdate: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;string&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">organization: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">belongsTo</span><span class="p">(</span><span class="s">&#39;App.Organization&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kind of tedious to write all of that out, to remember to keep it up to date should you add, change, or delete something on the serializer side, and it just feels very un-DRY.
Why should we have to hand-edit multiple files when we make a change? That&#8217;s why we have convention over configuration!</p>

<p>We created a simple rake task that uses the <a href="http://www.ruby-doc.org/gems/docs/a/active_model_serializers-0.5.2/ActiveModel/Serializer.html#method-c-schema">schema</a>
capability of ActiveModelSerializers to convert it to JSON, then is processed by
the compiler to generate the model data.</p>

<p>Note: This may not work with the latest version of AMS.</p>

<p>The rake task is simple (you can shim it on rake db:migrate and elsewhere if you want):</p>

<figure class='code'><figcaption><span>lib/tasks/ember_schema.rake  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:schema</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s1">&#39;Regenerate the Ember schema.js based on the serializers&#39;</span>
</span><span class='line'>    <span class="n">task</span> <span class="ss">:ember</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">schema_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">eager_load!</span> <span class="c1"># populate descendants</span>
</span><span class='line'>      <span class="no">ApplicationSerializer</span><span class="o">.</span><span class="n">descendants</span><span class="o">.</span><span class="n">sort_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">serializer_class</span><span class="o">|</span>
</span><span class='line'>        <span class="n">schema</span> <span class="o">=</span> <span class="n">serializer_class</span><span class="o">.</span><span class="n">schema</span>
</span><span class='line'>        <span class="n">schema_hash</span><span class="o">[</span><span class="n">serializer_class</span><span class="o">.</span><span class="n">model_class</span><span class="o">.</span><span class="n">name</span><span class="o">]</span> <span class="o">=</span> <span class="n">schema</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">schema_json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="n">schema_hash</span><span class="p">)</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span> <span class="s1">&#39;app/assets/javascripts/ember/models/schema.js&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;// Model schema, auto-generated from serializers.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;// This file should be checked in like db/schema.rb.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;// Check lib/tasks/ember_schema.rake for documentation.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">f</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;window.serializerSchema = </span><span class="si">#{</span><span class="n">schema_json</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that AMS does not include, nor care about, the Rails model validators, so
you&#8217;ll need to handle that on your own. We wrote a small helper to output a
few basic validations but since Ember lacks built-in validators, you&#8217;d have
to write your own validator library.</p>

<p><a href="https://github.com/dockyard/ember-validations">ember-validations</a>
looks like a great library that supports all current (Rails3) validations.
You would just need to export the validations as JSON, and then write an appropriate converter.</p>

<p>So, great! We now have the JSON definition for the user:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/ember/models/schema.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Model schema, auto-generated from serializers.</span>
</span><span class='line'><span class="c1">// This file should be checked in like db/schema.rb.</span>
</span><span class='line'><span class="c1">// Check lib/tasks/ember_schema.rake for documentation.</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">serializerSchema</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;User&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;attributes&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;integer&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;organization_id&quot;</span><span class="o">:</span> <span class="s2">&quot;integer&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;first_name&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;last_name&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;full_name&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ember_birthdate&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;phone&quot;</span><span class="o">:</span> <span class="s2">&quot;string&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;associations&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;organizations&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;belongs_to&quot;</span><span class="o">:</span> <span class="s2">&quot;organization&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do we get it into Ember?</p>

<figure class='code'><figcaption><span>app/assets/javascripts/ember/models/schema_parser.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#= require frontend/models/schema</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Check lib/tasks/ember_schema.rake for documentation about the schema.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">dsTypes =</span>
</span><span class='line'>  <span class="nv">string: </span><span class="s">&#39;string&#39;</span>
</span><span class='line'>  <span class="nv">text: </span><span class="s">&#39;string&#39;</span>
</span><span class='line'>  <span class="nv">decimal: </span><span class="s">&#39;number&#39;</span>
</span><span class='line'>  <span class="nv">integer: </span><span class="s">&#39;number&#39;</span>
</span><span class='line'>  <span class="nv">boolean: </span><span class="s">&#39;boolean&#39;</span>
</span><span class='line'>  <span class="nv">date: </span><span class="s">&#39;date&#39;</span>
</span><span class='line'>  <span class="c1"># There is no time type in ember-data yet</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Define base classes like App.UserBase with attribute and</span>
</span><span class='line'><span class="c1"># association definitions based on schema data.</span>
</span><span class='line'><span class="nv">App.defineModelBaseClassesFromSchema = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">className</span><span class="p">,</span> <span class="nx">schema</span> <span class="k">of</span> <span class="nx">serializerSchema</span>
</span><span class='line'>    <span class="nv">properties = </span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">underscoredAttr</span><span class="p">,</span> <span class="nx">type</span> <span class="k">of</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">attributes</span>
</span><span class='line'>      <span class="nv">attr = </span><span class="nx">underscoredAttr</span><span class="p">.</span><span class="nx">camelize</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">dsTypes</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'>        <span class="k">if</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/Id$/</span><span class="p">)</span> <span class="o">and</span> <span class="nx">dsTypes</span><span class="p">[</span><span class="nx">type</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;number&#39;</span>
</span><span class='line'>          <span class="c1"># On the serializer side, we serialize belongs_to relationships as</span>
</span><span class='line'>          <span class="c1"># integer _id fields, since AMS doesn&#39;t support belongs_to yet, and</span>
</span><span class='line'>          <span class="c1"># has_one sideloads the association, causing infinite recursion.</span>
</span><span class='line'>          <span class="c1"># Because of that, we infer a belongsTo relationship when we see _id</span>
</span><span class='line'>          <span class="c1"># attributes in the schema.</span>
</span><span class='line'>          <span class="nv">assoc = </span><span class="nx">attr</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/Id$/</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">properties</span><span class="p">[</span><span class="nx">assoc</span><span class="p">]</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">belongsTo</span><span class="p">(</span><span class="s">&#39;App.&#39;</span> <span class="o">+</span> <span class="nx">assoc</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">())</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="nx">properties</span><span class="p">[</span><span class="nx">attr</span><span class="p">]</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="nx">dsTypes</span><span class="p">[</span><span class="nx">type</span><span class="p">])</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1"># Ember.required doesn&#39;t quite do what we want it to yet, but maybe it</span>
</span><span class='line'>        <span class="c1"># will be fixed. https://github.com/emberjs/ember.js/issues/1299</span>
</span><span class='line'>        <span class="nx">properties</span><span class="p">[</span><span class="nx">attr</span><span class="p">]</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">required</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="nx">assoc</span><span class="p">,</span> <span class="nx">info</span> <span class="k">of</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">associations</span>
</span><span class='line'>      <span class="nv">assoc = </span><span class="nx">assoc</span><span class="p">.</span><span class="nx">camelize</span><span class="p">()</span>
</span><span class='line'>      <span class="k">if</span> <span class="nv">tableName = </span><span class="nx">info</span><span class="o">?</span><span class="p">.</span><span class="nx">belongs_to</span>
</span><span class='line'>        <span class="nx">properties</span><span class="p">[</span><span class="nx">assoc</span><span class="p">]</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">belongsTo</span><span class="p">(</span><span class="s">&#39;App.&#39;</span> <span class="o">+</span> <span class="nx">tableName</span><span class="p">.</span><span class="nx">classify</span><span class="p">().</span><span class="nx">capitalize</span><span class="p">())</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="nv">tableName = </span><span class="nx">info</span><span class="o">?</span><span class="p">.</span><span class="nx">has_many</span>
</span><span class='line'>        <span class="nx">properties</span><span class="p">[</span><span class="nx">assoc</span><span class="p">]</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">hasMany</span><span class="p">(</span><span class="s">&#39;App.&#39;</span> <span class="o">+</span> <span class="nx">tableName</span><span class="p">.</span><span class="nx">classify</span><span class="p">().</span><span class="nx">capitalize</span><span class="p">())</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="nv">tableName = </span><span class="nx">info</span><span class="o">?</span><span class="p">.</span><span class="nx">has_one</span>
</span><span class='line'>        <span class="nx">properties</span><span class="p">[</span><span class="nx">assoc</span><span class="p">]</span> <span class="o">=</span> <span class="nx">DS</span><span class="p">.</span><span class="nx">belongsTo</span><span class="p">(</span><span class="s">&#39;App.&#39;</span> <span class="o">+</span> <span class="nx">tableName</span><span class="p">.</span><span class="nx">classify</span><span class="p">().</span><span class="nx">capitalize</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Do validator stuff here, if you so desire</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">App</span><span class="p">[</span><span class="s">&quot;</span><span class="si">#{</span><span class="nx">className</span><span class="si">}</span><span class="s">Base&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span> <span class="nx">properties</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will create the Ember model definition as above, except with a &#8220;Base&#8221; suffix (<code>UserBase</code>).
You can then extend it with Ember-only attributes:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/ember/models/definitions.js.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#= require frontend/models/schema_parser</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.Model = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Define base classes like App.UserBase based on the schema, which in</span>
</span><span class='line'><span class="c1"># turn is generated based on the serializers. Below, we only add server-side</span>
</span><span class='line'><span class="c1"># associations, because the schema has their types as</span>
</span><span class='line'><span class="c1"># `null`, as well as client-side computed properties.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Check lib/tasks/ember_schema.rake for more documentation about the schema.</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">defineModelBaseClassesFromSchema</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.User = </span><span class="nx">App</span><span class="p">.</span><span class="nx">UserBase</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">syncing: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&#39;boolean&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">hasOrganizationBinding: </span><span class="s">&#39;organization.length&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. Now your models will be autogenerated and you
only have to worry about anything not included in the schema!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting OpenID working on Heroku]]></title>
    <link href="http://techblog.fundinggates.com/blog/2013/03/getting-openid-working-on-heroku/"/>
    <updated>2013-03-14T20:13:00-04:00</updated>
    <id>http://techblog.fundinggates.com/blog/2013/03/getting-openid-working-on-heroku</id>
    <content type="html"><![CDATA[<p><em>by <a href="http://www.mattrogish.com/">Matt Rogish</a> (<a href="https://twitter.com/MattRogish">@MattRogish</a>)</em></p>

<p>I just spent the last few days wrestling with OpenID intermittently failing on production, but not test, development, or staging.</p>

<p>It took me a bit of time to fix, so I thought I&#8217;d enumerate the steps.</p>

<ol>
<li>Use <a href="https://blog.heroku.com/archives/2013/2/27/unicorn_rails">Unicorn</a></li>
<li>Use <a href="https://devcenter.heroku.com/articles/memcachier">MemCachier</a></li>
<li>Use <a href="https://github.com/mperham/dalli">Dalli</a></li>
<li>Use <a href="https://github.com/openid/ruby-openid">ruby-openid</a></li>
<li>Configure OpenID to use Dalli:</li>
</ol>


<p>(set :expires_in to taste)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="o">::</span><span class="no">OpenID</span><span class="o">::</span><span class="no">Consumer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">session</span><span class="p">,</span>
</span><span class='line'>        <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Memcache</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Dalli</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHIER_SERVERS&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">username</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHIER_USERNAME&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">password</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHIER_PASSWORD&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">expires_in</span><span class="p">:</span> <span class="mi">300</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>If you are using <a href="https://github.com/josh/rack-openid">rack-openid</a></li>
</ol>


<p>(set :expires_in to taste)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="s2">&quot;Rack::OpenID&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="no">OpenID</span><span class="o">::</span><span class="no">Store</span><span class="o">::</span><span class="no">Memcache</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Dalli</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHIER_SERVERS&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">username</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHIER_USERNAME&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">password</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;MEMCACHIER_PASSWORD&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                             <span class="n">expires_in</span><span class="p">:</span> <span class="mi">300</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it!</p>

<p>P.S.</p>

<p>The reason why it worked on development and test: we only had a single Unicorn running, so memory storage (the default) worked fine. Staging is running more than one dyno, but since the load was so small it hit the same dyno more often than not, causing it to appear to work when it wasn&#8217;t really.</p>

<p>P.P.S.</p>

<p>You may see guides on the internet that are a few years old suggesting to use filesystem storage:</p>

<p><code>OpenID::Store::Filesystem.new('./tmp')</code></p>

<p>This would only work if you use a single <a href="https://devcenter.heroku.com/articles/dynos">dyno</a> as the filesystem is not shared amongst dynos. Stick with memcached!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying at Funding Gates]]></title>
    <link href="http://techblog.fundinggates.com/blog/2013/01/deploying-at-funding-gates/"/>
    <updated>2013-01-02T17:10:00-05:00</updated>
    <id>http://techblog.fundinggates.com/blog/2013/01/deploying-at-funding-gates</id>
    <content type="html"><![CDATA[<p><em>by <a href="http://www.mattrogish.com/">Matt Rogish</a> (<a href="https://twitter.com/MattRogish">@MattRogish</a>)</em></p>

<p>Deploying, it seems, is hard. Folks have written very complex mechanisms to
maintain different <a href="http://nvie.com/posts/a-successful-git-branching-model/">releases and branches</a>:</p>

<p><img class="center" src="http://techblog.fundinggates.com/images/deploying/gitflow.png"></p>

<p>Wow! That seems like a lot of work. You need to keep track of releases, hotfixes,
and make sure that any last-minute work is propogated to all the relevant branches.</p>

<p>This feels very <a href="http://www.rendell.org/pebble/software/2010/02/09/1265756844985.html">un-agile</a> and not very lean.
Moreover, it requires a gatekeeper (or more!) who decide if/when a release is to go out,
appropriate documentation (here&#8217;s version 1.x release notes), and individual developers
scrambling to get feature X or bug Y into the current release.</p>

<p>That&#8217;s a lot of headaches! Luckily, we&#8217;re working on web application software
so we don&#8217;t have to worry about cutting releases and delivering them to end-users.
Press a button and everyone gets the new feature!</p>

<p>As we&#8217;re optimizing for cycle time (how long it takes for a feature to hit production
after starting) any hand-offs or waiting introduces costly delays. Code that has
been written that is not deployed to users is <a href="http://www.joelonsoftware.com/items/2012/07/09.html">wasteful undelivered inventory</a>.</p>

<h3>Process</h3>

<ol>
<li>Developer works on feature</li>
<li>Developer commits and pushes to master</li>
<li><a href="http://www.circleci.com">The system</a> automatically deploys to production</li>
</ol>


<p><img class="center" src="http://techblog.fundinggates.com/images/deploying/ABC.jpg"></p>

<p>There is no next step. That&#8217;s too simple, right? Right. There are some pre-requisites
that make this possible:</p>

<ul>
<li>We require high unit and functional test coverage to ensure nothing gets broken.</li>
<li>At every push to a remote branch, a Continous Integration server runs and rejects a build
if a test fails, notifying the entire team of the failure.</li>
<li>Instead of working on long-running feature branches, we prefer to work with short running
local branches or directly on master (up to each developer to decide)</li>
<li>All features that aren&#8217;t &#8220;ready&#8221; (either not finished yet or not ready for &#8220;marketing&#8221; purposes) are
disabled via feature flags on staging/production.</li>
<li>Features we&#8217;re currently working on are enabled in development and QA/test</li>
<li>Any server errors are immediately delivered to the team chat/email and we have other
monitoring systems in place that would identify &#8220;something bad&#8221; happening in production</li>
</ul>


<h3>Benefits</h3>

<p>This gives us the ability to work on master, have master always deployable,
and be confident that code that isn&#8217;t ready for public consumption won&#8217;t appear.
Someone identifies a bug? I can add a test to catch it, fix it, and have it deployed
to production within minutes - all without needing to get permission from anyone
or perform git gymnastics.</p>

<p>Deployment is now a non-issue. No one needs to be &#8220;taught&#8221; how to do it. There
isn&#8217;t even a button that needs pressed.</p>

<p>Continuous deployment isn&#8217;t crazy, and it absolutely scales with larger teams.
Plenty of big companies like <a href="https://github.com/blog/1241-deploying-at-github">Github</a>,
<a href="http://codeascraft.etsy.com/2010/05/20/quantum-of-deployment/">Etsy</a>, and the
poster-child, <a href="http://timothyfitz.com/2009/02/10/continuous-deployment-at-imvu-doing-the-impossible-fifty-times-a-day/">IMVU</a>
are probably delivering as you read this.</p>

<p>You can add <a href="http://www.fundinggates.com">Funding Gates</a> to that list!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Moving Ember.js Forward]]></title>
    <link href="http://techblog.fundinggates.com/blog/2012/10/moving-emberjs-forward/"/>
    <updated>2012-10-17T11:00:00-04:00</updated>
    <id>http://techblog.fundinggates.com/blog/2012/10/moving-emberjs-forward</id>
    <content type="html"><![CDATA[<p><em>by <a href="http://www.solitr.com/blog/">Jo Liss</a> (<a href="https://twitter.com/jo_liss">@jo_liss</a>)</em></p>

<p>In this post, I&#8217;ll talk about the technical challenges we&#8217;ve encountered as
we&#8217;ve used Ember for a medium-sized project, as compared to the smaller apps
I&#8217;d written before.</p>

<p>The target audience is other developers that are interested in moving the
Ember.js project forward. The post is mostly intended as a conversation
starter. My hope is that through discussion and code, we will be in a better
place a few months from now.</p>

<p><strong>Note 1:</strong> If you are just trying to decide on a framework for your app, then
after our experiences, I can wholeheartedly recommend Ember. I&#8217;ll blog about
framework choices some other time. In the meantime, check out <a href="https://vimeo.com/49434697">Peter&#8217;s
talk</a>.</p>

<p><strong>Note 2:</strong> I believe that the problems I describe tend to arise with other
frameworks, like Angular or Backbone, as well. (Backbone in particular doesn&#8217;t
even try to address many of these things.) If you have seen or come up with
solutions for other frameworks, please share them!</p>

<h2>1. Debugging and Inspectability</h2>

<p>This is a surprising issue, so I&#8217;ll start with this one.</p>

<p>Ember has great top-down <a href="http://emberjs.com/documentation/">documentation</a>.
However, as my team-mates dove into our Ember app, one complaint was this: The
documentation gives simple, self-contained examples. Dropping from
<code>president.get('fullName')</code> into a fully-featured Ember app is pretty brutal.
It&#8217;s very hard to know what&#8217;s actually going on.</p>

<p>Unfortunately, Ember doesn&#8217;t make it very easy to inspect app state (check out
<a href="https://gist.github.com/3901862">this gist</a> for a demonstration).</p>

<p>I think we need several pieces to solve this puzzle:</p>

<ul>
<li><p>Integration with Web Inspector and Firebug: When showing Ember objects, Firebug
exposes the type (through <code>toString</code>), but not the properties. Chrome doesn&#8217;t
even show the type &#8211; just a generic <code>▶ Class</code>.</p>

<p>I&#8217;m guessing that we&#8217;ll need a &#8220;list all properties&#8221; function. Ember should
already have all the necessary infrastructure for this (<code>Ember.meta</code>, etc.).
Secondly, I wonder if we should link up with the Web Inspector and Firebug
folks to see if there&#8217;s a way we might be able to get custom UI for
inspecting Ember objects.</p></li>
<li><p>I wish it was possible to click into the page to see the view hierarchy.
I&#8217;m not sure how to implement this, but my pie-in-sky dream is something
like Firebug&#8217;s DOM tree, except for nested Ember views instead of DOM nodes.
This might be a couple notches too ambitious, but maybe a &#8220;light&#8221; version of
this will go a long way.</p>

<p>Apparently the <a href="http://www.illuminations-for-developers.com/">Illuminations</a>
addon does something like this, just not for Ember (yet?). Thanks to
<a href="https://twitter.com/wagenet">@wagenet</a> for the pointer!</p></li>
</ul>


<h2>2. Testing</h2>

<p>In my smaller Ember apps, I was able to get by with Selenium, but this is too
slow for more complex apps.</p>

<p>Client-side testing in JavaScript is the only viable option for a fast and
reliable test suite, in my opinion. QUnit is old and sturdy, but I personally
like <a href="https://github.com/jfirebaugh/konacha">Konacha</a> (Mocha for Rails). In
addition to unit tests, it allows you to run your Ember app in an iframe, and
then use jQuery to click on links and inspect the DOM. This essentially gives
you a very fast synchronous client-side integration test.</p>

<p>Ember already brings some helpful things for testing, like the FixtureAdapter
in ember-data. Still, the whole setup doesn&#8217;t feel very mature to me yet.
There is no pre-made testing environment set up for you, like with Rails, so
instead every project ends up with their own test setup at the moment.</p>

<p>So where do we go from here? It seems that there are two big issues:</p>

<ul>
<li><p>How do we reliably reset an app between tests? I&#8217;m suggesting a solution in
<a href="https://github.com/emberjs/ember.js/pull/1318">#1318</a> (Application#reset),
but it seems fraught with issues. I suspect that we may need to come up with
a better way. Much of the complexity of this problem comes from global
state, like the App.router object.</p></li>
<li><p>How do we give people a pre-made working JavaScript test setup, like Rails
does for the server side? I believe that this would belong in packages like
ember-rails. For instance, perhaps ember-rails could in the future generate a
Konacha setup.</p></li>
</ul>


<h3>Test Fixtures</h3>

<p>There is a subtle but painful issue with fixtures for JavaScript tests: As
long as you are passing down raw database columns (as tends to be the case in
smaller apps), you can easily define fixtures or factories on the client side.</p>

<p>But if many of the JSON attributes are cooked or computed, you&#8217;ll want your
fixtures guaranteed to be in sync with what the server generates. We ended up
defining our fixtures in Ruby, and dumping them out as JSON into a
<code>fixtures.js</code> file, using a generator rake task. This works OK, but it doesn&#8217;t
feel very clean.</p>

<p>I think we&#8217;re caught between a rock and a hard place here:</p>

<p>On the one hand, doing all computation on the client side doesn&#8217;t seem
practical yet. Even if the performance is good enough, at the moment
JavaScript is still too awful a platform to implement major chunks of logic.
Compare for instance <a href="https://gist.github.com/3901152">this Ruby method</a> and
<a href="https://gist.github.com/3901154">the equivalent Ember/CoffeeScript code</a>.</p>

<p>But on the other hand, if you perform computation on the server, it becomes
harder to test the JavaScript in isolation. Accordingly, you end up resorting
to workarounds like generated fixture definitions.</p>

<p>I&#8217;d love to hear how other people approach this issue.</p>

<h2>3. DRY Model Definitions</h2>

<p>In smaller projects you can repeat your database columns in the Ember-side
model definitions. For our more complex app, we found that this doesn&#8217;t scale.
We ended up going with code generation for the ember-data model definitions,
generating a schema.js file using a rake task.</p>

<p>I really wish there was a nicer way to get DRY model definitions.</p>

<p>The information for the model definitions needs to come from the server, so
this cannot be solved in Ember core.</p>

<p>In Rails&#8217;s case, the authoritative source might be the serializer classes used
by active_model_serializers. Getting that information into the client is
surprisingly non-trivial: You can&#8217;t dump complete model definitions at
precompilation time, along the lines of <code>App.Blog = &lt;%=
BlogSerializer.ember_definition %&gt;;</code>. This is because the type of each
attribute is stored in the database, and during precompilation, you don&#8217;t
generally have a database.</p>

<p>I&#8217;m not sure how this will be solved. I <em>do</em> think however that we need a
real, DRY solution, not just more generators in ember-rails.</p>

<hr />

<p>These are my thoughts so far. As I said, this post was intended as a
conversation starter. Once we figure out how to approach some of these things,
you&#8217;ll hopefully see me writing code and not just complaining idly on our
blog. ;-)</p>

<p>Leave a comment, open an <a href="https://github.com/emberjs/ember.js/issues">issue</a>,
or find me on the #emberjs channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Handlebars Helpers, Bound and Unbound]]></title>
    <link href="http://techblog.fundinggates.com/blog/2012/08/ember-handlebars-helpers-bound-and-unbound/"/>
    <updated>2012-08-27T11:14:00-04:00</updated>
    <id>http://techblog.fundinggates.com/blog/2012/08/ember-handlebars-helpers-bound-and-unbound</id>
    <content type="html"><![CDATA[<p><em>by <a href="http://www.solitr.com/blog/">Jo Liss</a> (<a href="https://twitter.com/jo_liss">@jo_liss</a>)</em></p>

<p>Ember has a number of <a href="http://docs.edge.emberjs.com/symbols/Handlebars.helpers.html">built-in Handlebars
helpers</a>, like
<code>{{view}}</code>, <code>{{#if}}</code>, or <code>{{action}}</code>.</p>

<p>You can also define your own helpers to DRY up your templates. I&#8217;ll explain
how to do this, and then how to deal with bindings.</p>

<h2>Unbound Helpers</h2>

<p>Let&#8217;s say you want to write an i18n helper (which you really shouldn&#8217;t, since
there is <a href="https://github.com/zendesk/ember-i18n">ember-i18n</a>), so that <code>{{t
helloWorld}}</code> produces &#8220;Hello World!&#8221;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">STRINGS</span><span class="p">[</span><span class="s1">&#39;helloWorld&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Hello World!&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i18nKey</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">String</span><span class="p">.</span><span class="nx">loc</span><span class="p">(</span><span class="nx">i18nKey</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s dissect this: <code>registerHelper</code> takes two arguments: the name of the
helper, and the helper function. The helper function takes the argument
(<code>i18nKey</code>) and an <code>options</code> hash. It returns a string, which will be safely
HTML-escaped by Ember.</p>

<p>To have your helper take optional arguments (e.g. <code>{{t greeting World}}</code>),
CoffeeScript splats are very useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span> <span class="s">&#39;t&#39;</span><span class="p">,</span> <span class="nf">(i18nKey, args..., options) -&gt;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">String</span><span class="p">.</span><span class="nx">loc</span><span class="p">(</span><span class="nx">i18nKey</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Helper options can be accessed through <code>options.hash</code>, e.g.
<code>options.hash.lang</code> for <code>{{t greeting lang="en"}}</code>.</p>

<h2>Bound Helpers</h2>

<p><em>Update: There is now support for bound Handlebars helpers in Ember master
(<a href="https://github.com/emberjs/ember.js/commit/46469831e7fe22d43b5dcfdf7ff60bd7000aa9de">46469837</a>).</em></p>

<p>If you find yourself writing <code>get</code> in a helper function without some sort of
binding, something is going wrong. Using <code>get</code> assumes that the data you are
get&#8217;ting is available before the helper is run. Even if it happens to work now,
relying on this ordering invites a slew of issues &#8211; exactly the kind that
Ember was designed to prevent. Instead, you need <em>bound helpers</em>.</p>

<p>Unfortunately, there is no canonical way to create bound helpers yet
(<a href="https://github.com/emberjs/ember.js/pull/1274">#1274</a>). If you try to set up
observers manually, you are in for a <a href="https://gist.github.com/2018185">lot</a> of
<a href="https://github.com/zendesk/ember-i18n/blob/8c5e518f59bf888f8c0477eafc57e7f73b383ada/lib/i18n.coffee#L90">complexity</a>.</p>

<p>Luckily, there is a cool trick: <strong>Instantiate a view from the helper function
by deferring to the <code>{{view}}</code> helper.</strong></p>

<p>Here is a generic helper function that I use to create helpers that defer to
views:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Register a Handlebars helper that instantiates `view`.</span>
</span><span class='line'><span class="c1">// The view will have its `content` property bound to the</span>
</span><span class='line'><span class="c1">// helper argument.</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">registerViewHelper</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">view</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerHelper</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">property</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">contentBinding</span> <span class="o">=</span> <span class="nx">property</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helpers</span><span class="p">.</span><span class="nx">view</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">view</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example, let&#8217;s implement a <code>{{capitalize}}</code> helper, so that  if
<code>{{name}}</code> is &#8220;whizboo&#8221;, then <code>{{capitalize name}}</code> is &#8220;Whizboo&#8221;,
and it will stay up-to-date as the name changes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>App.registerViewHelper('capitalize', Ember.View.extend({
</span><span class='line'>  tagName: 'span',
</span><span class='line'>
</span><span class='line'>  template: Ember.Handlebars.compile('{{view.formattedContent}}'),
</span><span class='line'>
</span><span class='line'>  formattedContent: (function() {
</span><span class='line'>    var content = this.get('content');
</span><span class='line'>
</span><span class='line'>    if (content != null) {
</span><span class='line'>      // Capitalize `content`.
</span><span class='line'>      return content.charAt(0).toUpperCase() + content.slice(1);
</span><span class='line'>    }
</span><span class='line'>  }).property('content')
</span><span class='line'>}));</span></code></pre></td></tr></table></div></figure>


<p>This is in fact a really useful general-purpose technique for creating bound
helpers. You can even pass options (<code>fooBinding="someProperty"</code>), which will
be set on the view.</p>

<h3>DRYing Further</h3>

<p>If you write more helpers like the one above, you&#8217;ll find that many can be
expressed as a unary function of the <code>content</code> argument. I like to have a
helper function to DRY up these kinds of helpers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Return a view that formats `content` through the function `fn`.
</span><span class='line'>inlineFormatter = function(fn) {
</span><span class='line'>  return Ember.View.extend({
</span><span class='line'>    tagName: 'span',
</span><span class='line'>
</span><span class='line'>    template: Ember.Handlebars.compile('{{view.formattedContent}}'),
</span><span class='line'>
</span><span class='line'>    formattedContent: (function() {
</span><span class='line'>      if (this.get('content') != null) {
</span><span class='line'>        return fn(this.get('content'));
</span><span class='line'>      }
</span><span class='line'>    }).property('content')
</span><span class='line'>  });
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>Now, for example, register a <code>{{capitalize}}</code> helper like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">registerViewHelper</span><span class="p">(</span><span class="s1">&#39;capitalize&#39;</span><span class="p">,</span> <span class="nx">inlineFormatter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">content</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">content</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capybara 2.0 Upgrade Guide]]></title>
    <link href="http://techblog.fundinggates.com/blog/2012/08/capybara-2-0-upgrade-guide/"/>
    <updated>2012-08-22T00:19:00-04:00</updated>
    <id>http://techblog.fundinggates.com/blog/2012/08/capybara-2-0-upgrade-guide</id>
    <content type="html"><![CDATA[<div style="float: right;">
  <a href="http://willnet.in/24">日本語版</a>
</div>


<p><em>by <a href="http://www.solitr.com/blog/">Jo Liss</a> (<a href="https://twitter.com/jo_liss">@jo_liss</a>)</em></p>

<p>The Capybara 2.0.0 beta is out. I&#8217;ll walk you through the most important changes,
and show you how to upgrade.</p>

<p>The bad news: If you upgrade to Capybara 2.0.0, you may have to make some
changes to your test suite to get it passing.</p>

<p>The good news: Once you&#8217;re compatible with Capybara 2.0.0, you can probably go
back and forth between 1.1.2 and 2.0.0 without any changes, should you decide
that 2.0.0 is not for you (yet).</p>

<h2>Compatibility Notes</h2>

<p>Third-party drivers like
<a href="https://github.com/thoughtbot/capybara-webkit">WebKit</a> or
<a href="https://github.com/jonleighton/poltergeist">Poltergeist</a> are not yet
compatible with Capybara 2.0. Use the default <code>:selenium</code> driver in the
meantime.</p>

<p>Also, Capybara 2.0 will likely
<a href="https://groups.google.com/d/msg/ruby-capybara/hjnT4aYMi4I/PsY-D_bXJhEJ">drop Ruby 1.8.7 compatibility</a>.</p>

<h2>How to Upgrade</h2>

<p>The latest 2.0.0 beta release is two months old. I recommend you use Capybara
master, since it has some fixes, and is generally in better shape than the
beta:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="n">git</span><span class="p">:</span> <span class="s1">&#39;https://github.com/jnicklas/capybara&#39;</span><span class="p">,</span> <span class="n">ref</span><span class="p">:</span> <span class="s1">&#39;7fa75e55420e&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Update:</strong> Capybara master is having some changes that still need to be
synchronized with rspec-rails
(<a href="https://github.com/jnicklas/capybara/issues/809">#809</a>). If you are using
RSpec, specify the <code>ref:</code> as above in the meantime.</p>

<p>There is one major change that will likely cause breakage in your test suite,
and that is how Capybara handles ambiguous matches:</p>

<h2>Ambiguous Matches</h2>

<p>The <code>find</code> method, as well as most actions like <code>click_on</code>, <code>fill_in</code>, etc.,
now raise an error if more than one element is found. While in Capybara 1.1.2,
it would simply select the first matching element, now the matches have to be
unambiguous.</p>

<p>Here is a common way this can break your test suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;Password&#39;</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="s1">&#39;secret&#39;</span>
</span><span class='line'><span class="n">fill_in</span> <span class="s1">&#39;Password confirmation&#39;</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="s1">&#39;secret&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first <code>fill_in</code> will fail now, because searching for &#8220;Password&#8221; will match
both the &#8220;Password&#8221; label, and the &#8220;Password confirmation&#8221; label (as a
sub-string), so it&#8217;s not unambiguous.</p>

<p>The best way to fix this is to match against the name or id attribute &#8211; such
as <code>fill_in 'password', with: 'secret'</code> &#8211; or, when there&#8217;s no good name or id,
add auxiliary <code>.js-password</code> and <code>.js-password-confirmation</code> classes. (The <code>js-</code>
prefix is for behavioral classes as recommended in the
<a href="https://github.com/styleguide/javascript">GitHub styleguide</a>.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">find</span><span class="p">(</span><span class="s1">&#39;.js-password&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">set</span> <span class="s1">&#39;secret&#39;</span>
</span><span class='line'><span class="n">find</span><span class="p">(</span><span class="s1">&#39;.js-password-confirmation&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">set</span> <span class="s1">&#39;secret&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find that using <code>.js-</code> classes instead of matching against English text is
actually a good practice in general to keep your tests from getting brittle.</p>

<p>Should you absolutely need to get the old behavior, you can use the <code>first</code>
method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">click_on</span> <span class="s1">&#39;ambiguous&#39;</span> <span class="c1"># old</span>
</span><span class='line'><span class="n">first</span><span class="p">(</span><span class="ss">:link</span><span class="p">,</span> <span class="s1">&#39;ambiguous&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span> <span class="c1"># new</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Minor changes</h2>

<p>You can assume that these don&#8217;t affect you unless something breaks:</p>

<ul>
<li><p><del>The RackTest driver &#8211; that&#8217;s the fast default driver, when you&#8217;re not
using <code>js: true</code> &#8211; no longer respects Rails&#8217;s <code>data-method</code> attribute
unless you tell it to.</del>
Update: The behavior matches Capybara 1.1.2 again
(<a href="https://github.com/jnicklas/capybara/pull/793">#793</a>), so long as you have
<code>require 'capybara/rails'</code> (like you should in any case).</p></li>
<li><p>The <code>find(:my_id)</code> symbol syntax is no longer supported
(<a href="https://github.com/jnicklas/capybara/issues/783">#783</a>). Write
<code>find('#my_id')</code> instead, as recommended in the documentation.</p></li>
<li><p><code>has_content?</code> checks for substrings in <code>text</code>, rather than using XPath
<code>contains(...)</code> expressions. This means improved whitespace normalization,
and suppression of invisible elements, like <code>head</code>, <code>script</code>, etc.</p></li>
<li><p><code>select</code> and <code>unselect</code> don&#8217;t allow for substring matches anymore.</p></li>
<li><p><code>Capybara.server_boot_timeout</code> and <code>Capybara.prefer_visible_elements</code> are no
longer needed and have been removed.</p></li>
<li><p><code>Capybara.timeout</code> and <code>wait_until</code> have been removed, as well as the
Selenium driver&#8217;s <code>:resynchronize</code> option. In general, if you have to wait
for Ajax requests to come back, like before you should try using
<code>page.should have_content</code> or <code>page.should have_css</code> to search for some change
on the page that indicates that the request has completed. The check will
essentially act as a gate for the Ajax request, as it will
<a href="https://github.com/jnicklas/capybara#asynchronous-javascript-ajax-and-friends">poll repeatedly</a>
until the condition is true. If that doesn&#8217;t work for you, you could
implement your own simple <code>wait_for</code> helper method (see e.g.
<a href="https://gist.github.com/10c41024510ee9f235e0">this gist</a>). See also
<a href="https://groups.google.com/d/topic/ruby-capybara/qQYWpQb9FzY/discussion">this thread</a>
about <code>wait_until</code> going away.</p></li>
</ul>


<h2>Goodies</h2>

<p>These won&#8217;t break your code when you upgrade, but they&#8217;re sweet new additions:</p>

<ul>
<li><p>Lots of new selectors, like <code>find(:field, '...')</code>, etc. These can come in
handy if you find yourself doing intricate node finding. Check the
<code>add_selector</code> calls in
<a href="https://github.com/jnicklas/capybara/blob/master/lib/capybara/selector.rb">lib/capybara/selector.rb</a>
for a list.</p></li>
<li><p><code>has_content?</code> accepts regexes.</p></li>
</ul>


<h2>Problems?</h2>

<p>Any speed bumps I forgot to mention? Leave a comment.</p>

<p>If you need help with problems, ask away on the
<a href="http://groups.google.com/group/ruby-capybara">mailing list</a>!
To report reproducible bugs or suggest changes in Capybara,
open an issue in the
<a href="https://github.com/jnicklas/capybara/issues">issue tracker</a>.
Jonas and I are monitoring both.</p>

<p>Even better, send a pull request! We&#8217;ll love you for it.</p>
]]></content>
  </entry>
  
</feed>
